<form id="d">
    <p>Name: <input type="text" id="name" name="name" value="<!--NAME-->" /></p>
</form>

<div>
    <!--PATH-->
    <button onclick="table.clearData();dataUpdated();return false;">Clear data</button>
    <button onclick="table.addRow({});dataUpdated();return false;">Add row</button>
    <button onclick="addColumn();return false;">Add column</button>
    <button onclick="table.selectRow();return false;">Select all</button>
    <button onclick='table.deselectRow();return false;'>Deselect all</button>
    <button onclick='table.import("csv",".csv");dataUpdated();return false;'>Load from CSV file</button>
    <button onclick='table.download("csv", "data.csv", {delimiter:","});return false;'>Save to CSV file</button>
    <button onclick='table.copyToClipboard("all");return false;'>Copy to clipboard</button>
</div>

<p>
<div id="data-table"></div>
<!--DATA-->

<p><button onclick='runPath(path);return false;'>Run testcase</button>

    <script>
        var headerContextMenu = [{
            label: "Delete column",
            action: function(e, column) {
                column.delete();
                dataUpdated();
            }
        }, ]

        function addColumn() {
            while (true) {
                var x = prompt("Please enter unique column name");
                if (x == null) break;
                if (x == "") continue;
                for (columnNum in table.getColumnDefinitions()) {
                    if (table.getColumnDefinitions()[columnNum].title == x) {
                        x = "";
                        break;
                    }
                }
                if (x == "") continue;
                table.addColumn({
                    title: x,
                    field: x
                }, true, x);

                var csvData2 = csvGen("-");
                console.log("brum" + csvData2);
                table.setData(csvData2);

                dataUpdated();
                break;
            }
        }

        var table = new Tabulator("#data-table", {
            columnDefaults: {
                headerContextMenu: headerContextMenu
            },
            height: 205,
            data: csvData,
            importFormat: "csv",
            layout: "fitColumns",
            autoColumns: true,
            movableColumns: true,
            placeholder: 'You can create data for your requests',
            //    history:true,
            //    movableRows: true,
            //    movableRowsConnectedElements: "#drop-area"
            selectableRows: true,
            addRowPos: "top",
            clipboard: true,
        });

        table.on("movableRowsElementDrop", function(e, element, row) {
            var div = document.createElement("div");
            div.textContent = row.getData().name;
            element.appendChild(div);
        });

        function csvGen(newColumn) {
            var data = table.getData();
            var csvData = "";
            //        console.log(data);
            first = true;
            for (columnNum in table.getColumnDefinitions()) {
                if (!first) csvData += ",";
                first = false;
                csvData += table.getColumnDefinitions()[columnNum].title;
            }
            for (var key in data) {
                first = true;
                csvData += "\n";
                if (newColumn != "") csvData += ",";
                for (var key2 in data[key]) {
                    if (!first) csvData += ",";
                    first = false;
                    csvData += data[key][key2];
                }
            }
            return csvData;
        }

        function dataUpdated() {
            const params = new URLSearchParams(window.location.search);
executePOST("file=" +
                params.get("file") +
                "&op=setdata" +
                "&path=" + path +
                "&data=" +
                encodeURIComponent(csvGen("")),
                        function(...args) {
                        }
                    );
        }

        table.on("dataChanged", function(data) {
            dataUpdated();
        });

        table.on("dataProcessed", function() {
            var newColumns = [];
            var aColumns = table.getColumns();
            for (var i = 0; i < aColumns.length; i++) {
                aColumns[i]._column.definition.editor = "input";
                aColumns[i]._column.definition.headerDblClick = function(e, column) {
                    let name = prompt(
                        "Please enter column name",
                        column._column.definition.title,
                    );
                    var newColumns = [];
                    var aColumns = table.getColumns();
                    for (var i = 0; i < aColumns.length; i++) {
                        if (aColumns[i]._column.definition == column._column.definition) {
                            aColumns[i]._column.definition.title = name;
                        }
                        newColumns.push(aColumns[i]._column.definition);
                    }
                    table.setColumns(newColumns);
                    dataUpdated();
                };
                newColumns.push(aColumns[i]._column.definition);
            }
            table.setColumns(newColumns);
        });
    </script>