<script>
    const debug = true;

    function runPath(emptypath) {
        executePOST("op=run&path=" + (emptypath == true ? "" : document.getElementById('id').value));
        return false;
    }

    function createPOST() {
        var http = new XMLHttpRequest();
        http.open("POST", window.location.protocol + "//" + window.location.hostname + ":" +
            window.location.port + window.location.pathname, true);
        http.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        return http;
    }

    function executePOST(par, OKhandler, ...args) {
        params = new URLSearchParams(window.location.search);
        URL = params.get("file") ? par + "&file=" + params.get("file") : par;
        if (URL.startsWith("nodebug")) URL = URL.replace("nodebug", "");
        if (debug) console.log("execute post with param " + URL);
        http = createPOST();
        http.onload = function() {
            if (http.status != 200) {
                alert(http.response);
            } else {
                if (debug && !par.startsWith("nodebug")) console.log(http.response);
                if (OKhandler != null) {
                    OKhandler(http.response, ...args);
                }
            }
        };
        http.onerror = function() {
            alert("request error");
        };
        http.send(URL);
    }
    
    function setSaveFile(disabled) {
            document.getElementById('savefile').disabled = disabled;
    window.onbeforeunload = disabled?null:function() {
return "File not saved. Click Cancel to stay on the page or OK to close (file will stay unsaved in server)";
};
    }

    var source = null;

    function setupSSE() {
        if (source != null && source.readyState != 2) return;
        params = new URLSearchParams(window.location.search);
        source = new EventSource("?sse=1&file=" + params.get('file'));
        source.onopen = function(e) {
            if (debug) console.log('SSE open with sse=1&file=' + params.get('file'));
        }
        source.onerror = function(e) {
            //            if (source.readyState == EventSource.CLOSED) {
            //                console.log("SSE closed");
            //            } else {
            //                console.log("SSE error");
            //            }
            source.close();
            setTimeout(function() {
                setupSSE();
            }, 5000); // 5 seconds
        };
        source.addEventListener("mainrunner", function(event) {
            params = new URLSearchParams(window.location.search);
            if (!params.get('file')) {
                if (debug) console.log("SSE mainrunner with " + event.data);
                window.location.reload();
            }
        });
        source.addEventListener("runner", function(event) {
            var obj = JSON.parse(event.data);
            params = new URLSearchParams(window.location.search);
            if (!params.get('file') || params.get('file').localeCompare(obj.file) != 0) return;
            if (debug) console.log("SSE runner with " + event.data);
            document.getElementById('runner').innerHTML = obj.info;
        });
        source.addEventListener("runstep", function(event) {
            var obj = JSON.parse(event.data);
            params = new URLSearchParams(window.location.search);
            if (!params.get('file') || params.get('file').localeCompare(obj.file) != 0) return;
            if (obj.path.localeCompare(document.getElementById('id').value) != 0) return;
            if (debug) console.log("SSE runstep with " + event.data);

            for (var i = 0; i < obj.oldtimes.length; i++) {
                var option1 = document.createElement("option");
                option1.value = obj.oldtimes[i];
                option1.text = obj.oldtimes[i];
                var selObj1 = document.getElementById("whenlast");
                selObj1.prepend(option1);
            }

            var option = document.createElement("option");
            option.value = obj.datetime;
            option.text = obj.datetime;
            var selObj = document.getElementById("whenlast");
            selObj.prepend(option);

            for (var i = 0; i < selObj.options.length; i++) {
                if (selObj.options[i].text == obj.datetime) {
                    selObj.options[i].selected = true;
                    break;
                }
            }
            setupLast(obj);
            setSaveFile(false);
        });
        source.addEventListener("renameelement", function(event) {
            var obj = JSON.parse(event.data);
            params = new URLSearchParams(window.location.search);
            if (!params.get('file') || params.get('file').localeCompare(obj.file) != 0) return;
            if (debug) console.log("SSE renameelement with " + event.data);
            el = document.getElementById(obj.path);
            el.text = obj.new;
            var toggler = document.getElementsByClassName("tcts");
            for (var i = 0; i < toggler.length; i++) {
                if (toggler[i].id && toggler[i].id === popupMenuID) {
                    toggler[i].id = toggler[i].id.replace(obj.path, obj.newpath);
                }
            }
            var toggler = document.getElementsByClassName("step");
            for (var i = 0; i < toggler.length; i++) {
                if (toggler[i].id && toggler[i].id === popupMenuID) {
                    toggler[i].id = toggler[i].id.replace(obj.path, obj.newpath);
                }
            }
	    setSaveFile(false);
        });
        source.addEventListener("newelement", function(event) {
            var obj = JSON.parse(event.data);
            params = new URLSearchParams(window.location.search);
            if (!params.get('file') || params.get('file').localeCompare(obj.file) != 0) return;
            if (debug) console.log("SSE newelement with " + event.data);
            newEl = obj.elplen == 3 ? getFileElement(obj.new, false, obj.newElementPath) :
                getFolderElement(obj.new, false, obj.newElementPath, obj.elplen == 1 ? "ts" : "tc");
            if (obj.path == "") {
                document.getElementById("menu").firstChild.appendChild(newEl, obj.new);
            } else {
                el = document.getElementById(obj.path);
                liparent = el.parentNode;
                liparent.parentNode.insertBefore(newEl, liparent);
            }
            if (obj.elplen != 3) {
                updateFolder(newEl);
            }
            document.getElementById("emptymenu").style.display = 'none';
	    setSaveFile(false);
        });
        source.addEventListener("newelementinside", function(event) {
            var obj = JSON.parse(event.data);
            params = new URLSearchParams(window.location.search);
            if (!params.get('file') || params.get('file').localeCompare(obj.file) != 0) return;
            if (debug) console.log("SSE newelementinside with " + event.data);
            newEl = obj.elplen == 2 ? getFileElement(obj.new, false, obj.newElementPath) :
                getFolderElement(obj.new, false, obj.newElementPath, obj.elplen == 1 ? "ts" : "tc");
            el = document.getElementById(obj.path);
            el.parentNode.children[2].prepend(newEl);
            if (obj.elplen != 2) {
                updateFolder(newEl);
            }
	    setSaveFile(false);
        });
        source.addEventListener("pastedrop", function(event) {
            var obj = JSON.parse(event.data);
            params = new URLSearchParams(window.location.search);
            if (!params.get('file') || params.get('file').localeCompare(obj.file) != 0) return;
            if (debug) console.log("SSE pastedrop with " + event.data);
            if (obj.elp1len == obj.elp2len) {
                el = document.getElementById(obj.newpath).parentNode;
                JSON.parse(obj.struct).forEach(function(folder, index) {
                    el.parentNode.insertBefore(addFilesFolders(folder, obj.newElementPath), el);
                });
            } else {
                el = document.getElementById(obj.newpath);
                JSON.parse(obj.struct).forEach(function(folder, index) {
                    el.parentNode.children[2].prepend(addFilesFolders(folder, obj.newElementPath));
                });
            }
            updateAllFolders();
	    setSaveFile(false);
        });
        source.addEventListener("enabledisableelement", function(event) {
            var obj = JSON.parse(event.data);
            params = new URLSearchParams(window.location.search);
            if (!params.get('file') || params.get('file').localeCompare(obj.file) != 0) return;
            if (debug) console.log("SSE enabledisableelement with " + event.data);
            document.getElementById(JSON.parse(event.data).path).classList.toggle("disabled");
	    setSaveFile(false);
        });
        source.addEventListener("deleteelement", function(event) {
            var obj = JSON.parse(event.data);
            params = new URLSearchParams(window.location.search);
            if (!params.get('file') || params.get('file').localeCompare(obj.file) != 0) return;
            if (debug) console.log("SSE deleteelement with " + event.data);
            var obj = JSON.parse(event.data);
            document.getElementById(obj.path).parentNode.remove();
            if (obj.emptyafter) {
		document.getElementById("emptymenu").style.display = 'inline';
	    }
	    setSaveFile(false);
        });
        source.addEventListener("setenabledisablesave", function(event) {
            var obj = JSON.parse(event.data);
            params = new URLSearchParams(window.location.search);
            if (!params.get('file') || params.get('file').localeCompare(obj.file) != 0) return;
            if (debug) console.log("SSE setenabledisablesave with " + event.data);
            setSaveFile(!obj.modified);
        });
    }
    setupSSE();
</script>
